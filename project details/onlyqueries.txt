CREATE TABLE profiles (
  id UUID REFERENCES auth.users(id) PRIMARY KEY,
  email TEXT NOT NULL,
  full_name TEXT,
  avatar_url TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  last_active_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE OR REPLACE FUNCTION public.handle_new_user() 
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.profiles (id, email, full_name, avatar_url)
  VALUES (
    NEW.id, 
    NEW.email,
    NEW.raw_user_meta_data->>'full_name',
    NEW.raw_user_meta_data->>'avatar_url'
  );
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();

CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_profiles_updated_at
  BEFORE UPDATE ON profiles
  FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();

CREATE TABLE workspaces (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  name TEXT NOT NULL,
  color TEXT NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  owner_id UUID REFERENCES profiles(id) NOT NULL,
  visibility TEXT CHECK (visibility IN ('private', 'public')) DEFAULT 'private'
);

CREATE TRIGGER update_workspaces_updated_at
  BEFORE UPDATE ON workspaces
  FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();

CREATE TABLE workspace_members (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  workspace_id UUID REFERENCES workspaces(id) ON DELETE CASCADE NOT NULL,
  profile_id UUID REFERENCES profiles(id) ON DELETE CASCADE NOT NULL,
  role TEXT CHECK (role IN ('admin', 'member', 'guest')) NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  invited_by UUID REFERENCES profiles(id),
  UNIQUE (workspace_id, profile_id)
);

CREATE TRIGGER update_workspace_members_updated_at
  BEFORE UPDATE ON workspace_members
  FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();

CREATE TABLE workspace_settings (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  workspace_id UUID REFERENCES workspaces(id) ON DELETE CASCADE NOT NULL,
  setting_type TEXT NOT NULL,
  setting_value JSONB NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  set_by UUID REFERENCES profiles(id),
  UNIQUE (workspace_id, setting_type)
);

CREATE TRIGGER update_workspace_settings_updated_at
  BEFORE UPDATE ON workspace_settings
  FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();

CREATE OR REPLACE FUNCTION handle_new_workspace()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO workspace_members (workspace_id, profile_id, role, invited_by)
  VALUES (NEW.id, NEW.owner_id, 'admin', NEW.owner_id);
  
  INSERT INTO workspace_settings (workspace_id, setting_type, setting_value, set_by)
  VALUES (
    NEW.id, 
    'membership_restriction', 
    '"anyone"',
    NEW.owner_id
  );
  
  INSERT INTO workspace_settings (workspace_id, setting_type, setting_value, set_by)
  VALUES (
    NEW.id, 
    'board_creation_restriction', 
    '{"public_boards":"any_member","workspace_visible_boards":"any_member","private_boards":"any_member"}',
    NEW.owner_id
  );
  
  INSERT INTO workspace_settings (workspace_id, setting_type, setting_value, set_by)
  VALUES (
    NEW.id, 
    'board_deletion_restriction', 
    '{"public_boards":"any_member","workspace_visible_boards":"any_member","private_boards":"any_member"}',
    NEW.owner_id
  );
  
  INSERT INTO workspace_settings (workspace_id, setting_type, setting_value, set_by)
  VALUES (
    NEW.id, 
    'board_sharing_restriction', 
    '"anyone"',
    NEW.owner_id
  );
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER on_workspace_created
  AFTER INSERT ON workspaces
  FOR EACH ROW EXECUTE PROCEDURE handle_new_workspace();

CREATE TABLE boards (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  name TEXT NOT NULL,
  color TEXT NOT NULL,
  workspace_id UUID REFERENCES workspaces(id) ON DELETE CASCADE NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  owner_id UUID REFERENCES profiles(id) NOT NULL,
  is_archived BOOLEAN DEFAULT FALSE,
  is_closed BOOLEAN DEFAULT FALSE,
  closed_at TIMESTAMP WITH TIME ZONE,
  closed_by UUID REFERENCES profiles(id),
  visibility TEXT CHECK (visibility IN ('workspace', 'members', 'public')) DEFAULT 'workspace',
  member_management TEXT CHECK (member_management IN ('admins_only', 'members_can_add')) DEFAULT 'admins_only',
  comment_permissions TEXT CHECK (comment_permissions IN ('members', 'admins_only', 'anyone')) DEFAULT 'members',
  members_can_archive BOOLEAN DEFAULT TRUE,
  last_activity_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE TRIGGER update_boards_updated_at
  BEFORE UPDATE ON boards
  FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();

CREATE TABLE board_members (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  board_id UUID REFERENCES boards(id) ON DELETE CASCADE NOT NULL,
  profile_id UUID REFERENCES profiles(id) ON DELETE CASCADE NOT NULL,
  role TEXT CHECK (role IN ('admin', 'member')) NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  invited_by UUID REFERENCES profiles(id),
  UNIQUE (board_id, profile_id)
);

CREATE TABLE board_stars (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  board_id UUID REFERENCES boards(id) ON DELETE CASCADE NOT NULL,
  profile_id UUID REFERENCES profiles(id) ON DELETE CASCADE NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE (board_id, profile_id)
);

CREATE TABLE board_watchers (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  board_id UUID REFERENCES boards(id) ON DELETE CASCADE NOT NULL,
  profile_id UUID REFERENCES profiles(id) ON DELETE CASCADE NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE (board_id, profile_id)
);

CREATE OR REPLACE FUNCTION handle_new_board()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO board_members (board_id, profile_id, role, invited_by)
  VALUES (NEW.id, NEW.owner_id, 'admin', NEW.owner_id);
  
  UPDATE boards SET last_activity_at = NOW() WHERE id = NEW.id;
  
  INSERT INTO activities (profile_id, board_id, action_type, action_data)
  VALUES (
    NEW.owner_id,
    NEW.id,
    'board_created',
    jsonb_build_object('board_name', NEW.name)
  );
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER on_board_created
  AFTER INSERT ON boards
  FOR EACH ROW EXECUTE PROCEDURE handle_new_board();

CREATE TABLE lists (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  name TEXT NOT NULL,
  board_id UUID REFERENCES boards(id) ON DELETE CASCADE NOT NULL,
  position FLOAT NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  is_archived BOOLEAN DEFAULT FALSE
);

CREATE TRIGGER update_lists_updated_at
  BEFORE UPDATE ON lists
  FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();

CREATE OR REPLACE FUNCTION handle_new_list()
RETURNS TRIGGER AS $$
BEGIN
  UPDATE boards SET last_activity_at = NOW() WHERE id = NEW.board_id;
  
  INSERT INTO activities (
    profile_id, 
    board_id, 
    list_id,
    action_type, 
    action_data
  )
  VALUES (
    (SELECT profile_id FROM board_members WHERE board_id = NEW.board_id LIMIT 1),
    NEW.board_id,
    NEW.id,
    'list_created',
    jsonb_build_object('list_name', NEW.name)
  );
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER on_list_created
  AFTER INSERT ON lists
  FOR EACH ROW EXECUTE PROCEDURE handle_new_list();

CREATE TABLE cards (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  title TEXT NOT NULL,
  description TEXT,
  list_id UUID REFERENCES lists(id) ON DELETE CASCADE NOT NULL,
  board_id UUID REFERENCES boards(id) ON DELETE CASCADE NOT NULL,
  position FLOAT NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  start_date TIMESTAMP WITH TIME ZONE,
  due_date TIMESTAMP WITH TIME ZONE,
  due_status TEXT CHECK (due_status IN ('due_soon', 'overdue', 'complete', NULL)),
  created_by UUID REFERENCES profiles(id) NOT NULL,
  is_archived BOOLEAN DEFAULT FALSE,
  is_watched BOOLEAN DEFAULT FALSE,
  cover JSONB
);

CREATE TRIGGER update_cards_updated_at
  BEFORE UPDATE ON cards
  FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();

CREATE TABLE card_watchers (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  card_id UUID REFERENCES cards(id) ON DELETE CASCADE NOT NULL,
  profile_id UUID REFERENCES profiles(id) ON DELETE CASCADE NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE (card_id, profile_id)
);

CREATE TABLE card_members (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  card_id UUID REFERENCES cards(id) ON DELETE CASCADE NOT NULL,
  profile_id UUID REFERENCES profiles(id) ON DELETE CASCADE NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE (card_id, profile_id)
);

CREATE OR REPLACE FUNCTION handle_new_card()
RETURNS TRIGGER AS $$
BEGIN
  UPDATE boards SET last_activity_at = NOW() WHERE id = NEW.board_id;
  
  INSERT INTO activities (
    profile_id, 
    board_id, 
    card_id,
    list_id,
    action_type, 
    action_data
  )
  VALUES (
    NEW.created_by,
    NEW.board_id,
    NEW.id,
    NEW.list_id,
    'card_created',
    jsonb_build_object(
      'card_title', NEW.title,
      'list_id', NEW.list_id,
      'list_name', (SELECT name FROM lists WHERE id = NEW.list_id)
    )
  );
  
  INSERT INTO card_watchers (card_id, profile_id)
  VALUES (NEW.id, NEW.created_by);
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER on_card_created
  AFTER INSERT ON cards
  FOR EACH ROW EXECUTE PROCEDURE handle_new_card();

CREATE TABLE labels (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  name TEXT,
  color TEXT NOT NULL,
  board_id UUID REFERENCES boards(id) ON DELETE CASCADE NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE TRIGGER update_labels_updated_at
  BEFORE UPDATE ON labels
  FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();

CREATE TABLE card_labels (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  card_id UUID REFERENCES cards(id) ON DELETE CASCADE NOT NULL,
  label_id UUID REFERENCES labels(id) ON DELETE CASCADE NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE (card_id, label_id)
);

CREATE OR REPLACE FUNCTION create_default_labels()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO labels (board_id, color, name) VALUES
    (NEW.id, '#61bd4f', 'Green'),
    (NEW.id, '#f2d600', 'Yellow'),
    (NEW.id, '#ff9f1a', 'Orange'),
    (NEW.id, '#eb5a46', 'Red'),
    (NEW.id, '#c377e0', 'Purple'),
    (NEW.id, '#0079bf', 'Blue');
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER on_board_created_add_labels
  AFTER INSERT ON boards
  FOR EACH ROW EXECUTE PROCEDURE create_default_labels();

CREATE TABLE checklists (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  card_id UUID REFERENCES cards(id) ON DELETE CASCADE NOT NULL,
  title TEXT NOT NULL,
  position FLOAT NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE TRIGGER update_checklists_updated_at
  BEFORE UPDATE ON checklists
  FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();

CREATE TABLE checklist_items (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  checklist_id UUID REFERENCES checklists(id) ON DELETE CASCADE NOT NULL,
  content TEXT NOT NULL,
  is_complete BOOLEAN DEFAULT FALSE,
  position FLOAT NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  completed_at TIMESTAMP WITH TIME ZONE,
  completed_by UUID REFERENCES profiles(id)
);

CREATE TRIGGER update_checklist_items_updated_at
  BEFORE UPDATE ON checklist_items
  FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();

CREATE OR REPLACE FUNCTION handle_new_checklist()
RETURNS TRIGGER AS $$
DECLARE
  board_id UUID;
  card_title TEXT;
BEGIN
  SELECT c.board_id, c.title INTO board_id, card_title
  FROM cards c WHERE c.id = NEW.card_id;
  
  UPDATE boards SET last_activity_at = NOW() WHERE id = board_id;
  
  INSERT INTO activities (
    profile_id, 
    board_id, 
    card_id,
    action_type, 
    action_data
  )
  VALUES (
    (SELECT created_by FROM cards WHERE id = NEW.card_id),
    board_id,
    NEW.card_id,
    'checklist_added',
    jsonb_build_object(
      'checklist_title', NEW.title,
      'card_title', card_title
    )
  );
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER on_checklist_created
  AFTER INSERT ON checklists
  FOR EACH ROW EXECUTE PROCEDURE handle_new_checklist();

CREATE TABLE comments (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  card_id UUID REFERENCES cards(id) ON DELETE CASCADE NOT NULL,
  profile_id UUID REFERENCES profiles(id) ON DELETE CASCADE NOT NULL,
  content TEXT NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  is_edited BOOLEAN DEFAULT FALSE,
  mentions JSONB
);

CREATE TRIGGER update_comments_updated_at
  BEFORE UPDATE ON comments
  FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();

CREATE OR REPLACE FUNCTION handle_new_comment()
RETURNS TRIGGER AS $$
DECLARE
  board_id UUID;
  card_title TEXT;
  mentioned_user UUID;
  mention_array JSONB;
BEGIN
  SELECT c.board_id, c.title INTO board_id, card_title
  FROM cards c WHERE c.id = NEW.card_id;
  
  UPDATE boards SET last_activity_at = NOW() WHERE id = board_id;
  
  INSERT INTO activities (
    profile_id, 
    board_id, 
    card_id,
    comment_id,
    action_type, 
    action_data
  )
  VALUES (
    NEW.profile_id,
    board_id,
    NEW.card_id,
    NEW.id,
    'comment_added',
    jsonb_build_object(
      'comment_content', NEW.content,
      'card_title', card_title
    )
  );
  
  IF NEW.mentions IS NOT NULL THEN
    mention_array := NEW.mentions;
    
    FOR i IN 0..jsonb_array_length(mention_array) - 1 LOOP
      mentioned_user := (mention_array->i)::UUID;
      
      INSERT INTO notifications (
        profile_id,
        type,
        related_card_id,
        related_board_id,
        related_comment_id,
        content
      )
      VALUES (
        mentioned_user,
        'mention',
        NEW.card_id,
        board_id,
        NEW.id,
        'You were mentioned in a comment on "' || card_title || '"'
      );
    END LOOP;
  END IF;
  
  INSERT INTO notifications (
    profile_id,
    type,
    related_card_id,
    related_board_id,
    related_comment_id,
    content
  )
  SELECT 
    cw.profile_id,
    'comment_on_watched_card',
    NEW.card_id,
    board_id,
    NEW.id,
    'New comment on card "' || card_title || '" you are watching'
  FROM card_watchers cw
  WHERE cw.card_id = NEW.card_id
  AND cw.profile_id != NEW.profile_id;
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER on_comment_created
  AFTER INSERT ON comments
  FOR EACH ROW EXECUTE PROCEDURE handle_new_comment();

CREATE TABLE attachments (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  card_id UUID REFERENCES cards(id) ON DELETE CASCADE NOT NULL,
  name TEXT NOT NULL,
  url TEXT NOT NULL,
  type TEXT NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  created_by UUID REFERENCES profiles(id) NOT NULL
);

CREATE TRIGGER update_attachments_updated_at
  BEFORE UPDATE ON attachments
  FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();

CREATE OR REPLACE FUNCTION handle_new_attachment()
RETURNS TRIGGER AS $$
DECLARE
  board_id UUID;
  card_title TEXT;
BEGIN
  SELECT c.board_id, c.title INTO board_id, card_title
  FROM cards c WHERE c.id = NEW.card_id;
  
  UPDATE boards SET last_activity_at = NOW() WHERE id = board_id;
  
  INSERT INTO activities (
    profile_id, 
    board_id, 
    card_id,
    action_type, 
    action_data
  )
  VALUES (
    NEW.created_by,
    board_id,
    NEW.card_id,
    'attachment_added',
    jsonb_build_object(
      'attachment_name', NEW.name,
      'attachment_type', NEW.type,
      'card_title', card_title
    )
  );
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER on_attachment_created
  AFTER INSERT ON attachments
  FOR EACH ROW EXECUTE PROCEDURE handle_new_attachment();

CREATE TABLE card_votes (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  card_id UUID REFERENCES cards(id) ON DELETE CASCADE NOT NULL,
  profile_id UUID REFERENCES profiles(id) ON DELETE CASCADE NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE (card_id, profile_id)
);

CREATE TABLE board_vote_settings (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  board_id UUID REFERENCES boards(id) ON DELETE CASCADE NOT NULL,
  votes_per_member INTEGER DEFAULT 5,
  can_vote TEXT CHECK (can_vote IN ('members', 'admins', 'anyone')) DEFAULT 'members',
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  set_by UUID REFERENCES profiles(id)
);

CREATE TRIGGER update_board_vote_settings_updated_at
  BEFORE UPDATE ON board_vote_settings
  FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();

CREATE OR REPLACE FUNCTION handle_new_vote()
RETURNS TRIGGER AS $$
DECLARE
  board_id UUID;
  card_title TEXT;
BEGIN
  SELECT c.board_id, c.title INTO board_id, card_title
  FROM cards c WHERE c.id = NEW.card_id;
  
  UPDATE boards SET last_activity_at = NOW() WHERE id = board_id;
  
  INSERT INTO activities (
    profile_id, 
    board_id, 
    card_id,
    action_type, 
    action_data
  )
  VALUES (
    NEW.profile_id,
    board_id,
    NEW.card_id,
    'card_voted',
    jsonb_build_object(
      'card_title', card_title
    )
  );
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER on_vote_created
  AFTER INSERT ON card_votes
  FOR EACH ROW EXECUTE PROCEDURE handle_new_vote();

CREATE TABLE card_locations (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  card_id UUID REFERENCES cards(id) ON DELETE CASCADE NOT NULL,
  name TEXT NOT NULL,
  address TEXT,
  latitude DECIMAL NOT NULL,
  longitude DECIMAL NOT NULL,
  location_type TEXT CHECK (location_type IN ('point', 'area')) DEFAULT 'point',
  radius INTEGER,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  created_by UUID REFERENCES profiles(id) NOT NULL
);

CREATE TRIGGER update_card_locations_updated_at
  BEFORE UPDATE ON card_locations
  FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();

CREATE OR REPLACE FUNCTION handle_new_location()
RETURNS TRIGGER AS $$
DECLARE
  board_id UUID;
  card_title TEXT;
BEGIN
  SELECT c.board_id, c.title INTO board_id, card_title
  FROM cards c WHERE c.id = NEW.card_id;
  
  UPDATE boards SET last_activity_at = NOW() WHERE id = board_id;
  
  INSERT INTO activities (
    profile_id, 
    board_id, 
    card_id,
    action_type, 
    action_data
  )
  VALUES (
    NEW.created_by,
    board_id,
    NEW.card_id,
    'location_added',
    jsonb_build_object(
      'location_name', NEW.name,
      'card_title', card_title
    )
  );
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER on_location_created
  AFTER INSERT ON card_locations
  FOR EACH ROW EXECUTE PROCEDURE handle_new_location();

CREATE TABLE custom_field_definitions (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  board_id UUID REFERENCES boards(id) ON DELETE CASCADE NOT NULL,
  name TEXT NOT NULL,
  type TEXT CHECK (type IN ('text', 'number', 'date', 'dropdown', 'checkbox')) NOT NULL,
  options JSONB,
  position FLOAT NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  created_by UUID REFERENCES profiles(id) NOT NULL,
  is_required BOOLEAN DEFAULT FALSE,
  is_visible_on_front BOOLEAN DEFAULT TRUE
);

CREATE TABLE card_custom_fields (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  card_id UUID REFERENCES cards(id) ON DELETE CASCADE NOT NULL,
  field_id UUID REFERENCES custom_field_definitions(id) ON DELETE CASCADE NOT NULL,
  value JSONB,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE TRIGGER update_card_custom_fields_updated_at
  BEFORE UPDATE ON card_custom_fields
  FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();

CREATE OR REPLACE FUNCTION handle_custom_field_change()
RETURNS TRIGGER AS $$
DECLARE
  board_id UUID;
  card_title TEXT;
  field_name TEXT;
BEGIN
  SELECT c.board_id, c.title, cfd.name INTO board_id, card_title, field_name
  FROM cards c 
  JOIN custom_field_definitions cfd ON cfd.id = NEW.field_id
  WHERE c.id = NEW.card_id;
  
  UPDATE boards SET last_activity_at = NOW() WHERE id = board_id;
  
  INSERT INTO activities (
    profile_id, 
    board_id, 
    card_id,
    action_type, 
    action_data
  )
  VALUES (
    (SELECT created_by FROM cards WHERE id = NEW.card_id),
    board_id,
    NEW.card_id,
    'custom_field_updated',
    jsonb_build_object(
      'field_name', field_name,
      'card_title', card_title,
      'new_value', NEW.value
    )
  );
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER on_custom_field_changed
  AFTER INSERT OR UPDATE ON card_custom_fields
  FOR EACH ROW EXECUTE PROCEDURE handle_custom_field_change();

CREATE TABLE saved_filters (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  name TEXT NOT NULL,
  board_id UUID REFERENCES boards(id) ON DELETE CASCADE NOT NULL,
  filter_criteria JSONB NOT NULL,
  created_by UUID REFERENCES profiles(id) NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  is_shared BOOLEAN DEFAULT FALSE
);

CREATE TRIGGER update_saved_filters_updated_at
  BEFORE UPDATE ON saved_filters
  FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();

CREATE TABLE activities (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  profile_id UUID REFERENCES profiles(id) NOT NULL,
  board_id UUID REFERENCES boards(id) NOT NULL,
  card_id UUID REFERENCES cards(id),
  list_id UUID REFERENCES lists(id),
  comment_id UUID REFERENCES comments(id),
  action_type TEXT NOT NULL,
  action_data JSONB NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE TABLE notifications (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  profile_id UUID REFERENCES profiles(id) ON DELETE CASCADE NOT NULL,
  type TEXT NOT NULL,
  related_card_id UUID REFERENCES cards(id) ON DELETE CASCADE,
  related_board_id UUID REFERENCES boards(id) ON DELETE CASCADE,
  related_comment_id UUID REFERENCES comments(id) ON DELETE CASCADE,
  content TEXT NOT NULL,
  is_read BOOLEAN DEFAULT FALSE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE OR REPLACE FUNCTION generate_due_date_notifications()
RETURNS void AS $$
DECLARE
  card_record RECORD;
BEGIN
  FOR card_record IN
    SELECT c.id, c.title, c.due_date, c.board_id, c.created_by
    FROM cards c
    WHERE c.due_date IS NOT NULL
    AND c.due_date BETWEEN NOW() AND NOW() + INTERVAL '24 hours'
    AND c.due_status IS DISTINCT FROM 'complete'
  LOOP
    INSERT INTO notifications (
      profile_id,
      type,
      related_card_id,
      related_board_id,
      content
    )
    VALUES (
      card_record.created_by,
      'due_soon',
      card_record.id,
      card_record.board_id,
      'Card "' || card_record.title || '" is due in less than 24 hours'
    )
    ON CONFLICT DO NOTHING;
    
    INSERT INTO notifications (
      profile_id,
      type,
      related_card_id,
      related_board_id,
      content
    )
    SELECT 
      cm.profile_id,
      'due_soon',
      card_record.id,
      card_record.board_id,
      'Card "' || card_record.title || '" is due in less than 24 hours'
    FROM card_members cm
    WHERE cm.card_id = card_record.id
    AND cm.profile_id != card_record.created_by
    ON CONFLICT DO NOTHING;
  END LOOP;
  
  FOR card_record IN
    SELECT c.id, c.title, c.due_date, c.board_id, c.created_by
    FROM cards c
    WHERE c.due_date IS NOT NULL
    AND c.due_date < NOW()
    AND c.due_status IS DISTINCT FROM 'complete'
  LOOP
    INSERT INTO notifications (
      profile_id,
      type,
      related_card_id,
      related_board_id,
      content
    )
    VALUES (
      card_record.created_by,
      'overdue',
      card_record.id,
      card_record.board_id,
      'Card "' || card_record.title || '" is overdue'
    )
    ON CONFLICT DO NOTHING;
    
    INSERT INTO notifications (
      profile_id,
      type,
      related_card_id,
      related_board_id,
      content
    )
    SELECT 
      cm.profile_id,
      'overdue',
      card_record.id,
      card_record.board_id,
      'Card "' || card_record.title || '" is overdue'
    FROM card_members cm
    WHERE cm.card_id = card_record.id
    AND cm.profile_id != card_record.created_by
    ON CONFLICT DO NOTHING;
  END LOOP;
END;
$$ LANGUAGE plpgsql;

CREATE TABLE card_templates (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  title TEXT NOT NULL,
  description TEXT,
  board_id UUID REFERENCES boards(id) NOT NULL,
  created_by UUID REFERENCES profiles(id) NOT NULL,
  labels JSONB,
  checklists JSONB,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE TRIGGER update_card_templates_updated_at
  BEFORE UPDATE ON card_templates
  FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();

CREATE TABLE list_templates (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  name TEXT NOT NULL,
  board_id UUID REFERENCES boards(id) NOT NULL,
  cards JSONB,
  created_by UUID REFERENCES profiles(id) NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE TRIGGER update_list_templates_updated_at
  BEFORE UPDATE ON list_templates
  FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();

CREATE TABLE board_templates (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  name TEXT NOT NULL,
  workspace_id UUID REFERENCES workspaces(id) NOT NULL,
  lists JSONB,
  labels JSONB,
  created_by UUID REFERENCES profiles(id) NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE TRIGGER update_board_templates_updated_at
  BEFORE UPDATE ON board_templates
  FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();

CREATE TABLE invitations (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  email TEXT NOT NULL,
  workspace_id UUID REFERENCES workspaces(id) NOT NULL,
  board_id UUID REFERENCES boards(id),
  invited_by UUID REFERENCES profiles(id) NOT NULL,
  role TEXT CHECK (role IN ('member', 'guest', 'admin')) NOT NULL,
  token TEXT NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
  accepted_at TIMESTAMP WITH TIME ZONE
);

CREATE OR REPLACE FUNCTION process_invitation_acceptance()
RETURNS TRIGGER AS $$
DECLARE
  user_id UUID;
BEGIN
  SELECT id INTO user_id FROM profiles WHERE email = NEW.email;
  
  IF NEW.board_id IS NULL THEN
    INSERT INTO workspace_members (
      workspace_id,
      profile_id,
      role,
      invited_by
    )
    VALUES (
      NEW.workspace_id,
      user_id,
      NEW.role,
      NEW.invited_by
    )
    ON CONFLICT (workspace_id, profile_id) 
    DO UPDATE SET role = NEW.role;
    
    INSERT INTO activities (
      profile_id,
      board_id,
      action_type,
      action_data
    )
    SELECT
      NEW.invited_by,
      b.id,
      'member_joined_workspace',
      jsonb_build_object(
        'member_email', NEW.email,
        'workspace_id', NEW.workspace_id,
        'workspace_name', w.name
      )
    FROM workspaces w
    JOIN boards b ON b.workspace_id = w.id
    WHERE w.id = NEW.workspace_id
    LIMIT 1;
  
  ELSE
    INSERT INTO board_members (
      board_id,
      profile_id,
      role,
      invited_by
    )
    VALUES (
      NEW.board_id,
      user_id,
      CASE WHEN NEW.role = 'guest' THEN 'member' ELSE NEW.role END,
      NEW.invited_by
    )
    ON CONFLICT (board_id, profile_id) 
    DO UPDATE SET role = CASE WHEN NEW.role = 'guest' THEN 'member' ELSE NEW.role END;
    
    INSERT INTO activities (
      profile_id,
      board_id,
      action_type,
      action_data
    )
    VALUES (
      NEW.invited_by,
      NEW.board_id,
      'member_joined_board',
      jsonb_build_object(
        'member_email', NEW.email,
        'board_name', (SELECT name FROM boards WHERE id = NEW.board_id)
      )
    );
  END IF;
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER on_invitation_accepted
  AFTER UPDATE OF accepted_at ON invitations
  FOR EACH ROW
  WHEN (OLD.accepted_at IS NULL AND NEW.accepted_at IS NOT NULL)
  EXECUTE PROCEDURE process_invitation_acceptance();

ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE workspaces ENABLE ROW LEVEL SECURITY;
ALTER TABLE workspace_members ENABLE ROW LEVEL SECURITY;
ALTER TABLE workspace_settings ENABLE ROW LEVEL SECURITY;
ALTER TABLE boards ENABLE ROW LEVEL SECURITY;
ALTER TABLE board_members ENABLE ROW LEVEL SECURITY;
ALTER TABLE board_stars ENABLE ROW LEVEL SECURITY;
ALTER TABLE board_watchers ENABLE ROW LEVEL SECURITY;
ALTER TABLE lists ENABLE ROW LEVEL SECURITY;
ALTER TABLE cards ENABLE ROW LEVEL SECURITY;
ALTER TABLE card_watchers ENABLE ROW LEVEL SECURITY;
ALTER TABLE card_members ENABLE ROW LEVEL SECURITY;
ALTER TABLE labels ENABLE ROW LEVEL SECURITY;
ALTER TABLE card_labels ENABLE ROW LEVEL SECURITY;
ALTER TABLE checklists ENABLE ROW LEVEL SECURITY;
ALTER TABLE checklist_items ENABLE ROW LEVEL SECURITY;
ALTER TABLE comments ENABLE ROW LEVEL SECURITY;
ALTER TABLE attachments ENABLE ROW LEVEL SECURITY;
ALTER TABLE card_votes ENABLE ROW LEVEL SECURITY;
ALTER TABLE board_vote_settings ENABLE ROW LEVEL SECURITY;
ALTER TABLE card_locations ENABLE ROW LEVEL SECURITY;
ALTER TABLE custom_field_definitions ENABLE ROW LEVEL SECURITY;
ALTER TABLE card_custom_fields ENABLE ROW LEVEL SECURITY;
ALTER TABLE saved_filters ENABLE ROW LEVEL SECURITY;
ALTER TABLE activities ENABLE ROW LEVEL SECURITY;
ALTER TABLE notifications ENABLE ROW LEVEL SECURITY;
ALTER TABLE card_templates ENABLE ROW LEVEL SECURITY;
ALTER TABLE list_templates ENABLE ROW LEVEL SECURITY;
ALTER TABLE board_templates ENABLE ROW LEVEL SECURITY;
ALTER TABLE invitations ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view their own profile"
  ON profiles FOR SELECT
  USING (auth.uid() = id);

CREATE POLICY "Users can update their own profile"
  ON profiles FOR UPDATE
  USING (auth.uid() = id);

CREATE POLICY "Users can view workspaces they are a member of"
  ON workspaces FOR SELECT
  USING (
    EXISTS (
      SELECT 1 FROM workspace_members
      WHERE workspace_members.workspace_id = workspaces.id
      AND workspace_members.profile_id = auth.uid()
    )
    OR
    (visibility = 'public')
  );

CREATE POLICY "Users can create workspaces"
  ON workspaces FOR INSERT
  WITH CHECK (owner_id = auth.uid());

CREATE POLICY "Workspace owners and admins can update workspaces"
  ON workspaces FOR UPDATE
  USING (
    owner_id = auth.uid()
    OR
    EXISTS (
      SELECT 1 FROM workspace_members
      WHERE workspace_members.workspace_id = workspaces.id
      AND workspace_members.profile_id = auth.uid()
      AND workspace_members.role = 'admin'
    )
  );

CREATE POLICY "Users can view workspace members of workspaces they belong to"
  ON workspace_members FOR SELECT
  USING (
    EXISTS (
      SELECT 1 FROM workspace_members wm
      WHERE wm.workspace_id = workspace_members.workspace_id
      AND wm.profile_id = auth.uid()
    )
  );

CREATE POLICY "Workspace admins can manage members"
  ON workspace_members FOR ALL
  USING (
    EXISTS (
      SELECT 1 FROM workspace_members wm
      WHERE wm.workspace_id = workspace_members.workspace_id
      AND wm.profile_id = auth.uid()
      AND wm.role = 'admin'
    )
  );

CREATE POLICY "Users can view boards based on visibility and membership"
  ON boards FOR SELECT
  USING (
    visibility = 'public'
    OR
    (visibility = 'workspace' AND
     EXISTS (
       SELECT 1 FROM workspace_members
       WHERE workspace_id = boards.workspace_id
       AND profile_id = auth.uid()
     ))
    OR
    EXISTS (
      SELECT 1 FROM board_members
      WHERE board_id = boards.id
      AND profile_id = auth.uid()
    )
  );

CREATE POLICY "Users can update boards they are admins of"
  ON boards FOR UPDATE
  USING (
    owner_id = auth.uid()
    OR
    EXISTS (
      SELECT 1 FROM board_members
      WHERE board_id = boards.id
      AND profile_id = auth.uid()
      AND role = 'admin'
    )
  );

CREATE POLICY "Users can view lists on boards they can access"
  ON lists FOR SELECT
  USING (
    EXISTS (
      SELECT 1 FROM boards
      WHERE boards.id = lists.board_id
      AND (
        boards.visibility = 'public' 
        OR
        (boards.visibility = 'workspace' AND
         EXISTS (
           SELECT 1 FROM workspace_members
           WHERE workspace_id = boards.workspace_id
           AND profile_id = auth.uid()
         ))
        OR
        EXISTS (
          SELECT 1 FROM board_members
          WHERE board_id = boards.id
          AND profile_id = auth.uid()
        )
      )
    )
  );

CREATE POLICY "Board members can create and update lists"
  ON lists FOR ALL
  USING (
    EXISTS (
      SELECT 1 FROM board_members
      WHERE board_id = lists.board_id
      AND profile_id = auth.uid()
    )
  );

CREATE POLICY "Users can view cards on lists they can access"
  ON cards FOR SELECT
  USING (
    EXISTS (
      SELECT 1 FROM boards
      WHERE boards.id = cards.board_id
      AND (
        boards.visibility = 'public' 
        OR
        (boards.visibility = 'workspace' AND
         EXISTS (
           SELECT 1 FROM workspace_members
           WHERE workspace_id = boards.workspace_id
           AND profile_id = auth.uid()
         ))
        OR
        EXISTS (
          SELECT 1 FROM board_members
          WHERE board_id = boards.id
          AND profile_id = auth.uid()
        )
      )
    )
  );

CREATE POLICY "Board members can create and update cards"
  ON cards FOR ALL
  USING (
    EXISTS (
      SELECT 1 FROM board_members
      WHERE board_id = cards.board_id
      AND profile_id = auth.uid()
    )
  );

CREATE POLICY "Users can only view their own notifications"
  ON notifications FOR SELECT
  USING (profile_id = auth.uid());

CREATE POLICY "Users can update their own notifications"
  ON notifications FOR UPDATE
  USING (profile_id = auth.uid());

